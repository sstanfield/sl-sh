searchState.loadedDescShard("slvm", 0, "This module controls access to two different floating …\nFast, non-cryptographic hash used by rustc and Firefox.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe F56 struct represents a 56-bit floating point number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the F56 is NaN. Note that there are many …\nReturns true if the relative difference between the two …\nReturns true if the two F56s’s decimal forms are equal …\nReturns true if the two F56s are bitwise identical\nReturns true if the two F56s are bitwise identical OR if …\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nA speedy hash algorithm for use within rustc. The hashmap …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the line number that corresponds to the current_ip …\nReturn the current offset (IP) for the frame using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf val is on the heap is it still alive after GC Return …\nPause garbage collection. Each pause_gc must have an …\nUnPause garbage collection. Each pause_gc must have an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper class for a HashMap&lt;Value, Value&gt;.  We need this …\nIterator over the key vals in a HashMap.\nIterator over the keys in a HashMap.\nProvides a wrapper to allow us to build a hashmap with …\nClear (remove all key/values) from the HashMap.\nDoes this HashMap contain key?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake a ValHash from a Value.\nGet the value at key, requires the current VM for hashing.\nInsert the value at key, requires the current VM for …\nInsert val at the key id provided.  This allows calling …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this HashMap empty?\nReturn an iterator over all the (key, value) pairs in the …\nReturns an iterator over all the keys in the HashMap.\nNumber of items in the HashMap.\nCreate a new empty HashMap.\nRemove key from the HashMap.  Return the old value if it …\nRemove the key from HashMap (like remove) except caller …\nCreate a new empty HashMap with an initial capacity.\nReturn the amount of memory allocated by the interner.\nTrue if name is an interned symbol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf name is interned then return it, otherwise None.\nIntern name in this interner.  Will return the existing …\nIntern name in this interner.  Will return the existing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre there no symbols in this interner?\nReturn the number of symbols in the interner.\nReturn the amount of memory used to store symbols in the …\nCreate an interner with capacity cap (to the next power of …\nEnum representing the various types of values in Slosh.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the hash of a value making sure that strings (whether …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all values in the list, vector, …\nReturns an iterator over all values in the list, vector, …\nSets a global to val.  The value needs have local numbers …\nMap a <code>Value</code> to a <code>ValueType</code> which can be written to a debug …\nSize (in elements/Values) of the stack.\nAllocate an Error on the heap.\nAllocate a Value on the heap.  Moving a value to the heap …\nAllocate a Value on the heap.  Moving a value to the heap …\nRuns a lambda.  Will save and restore the VM state even on …\nExecutes chunk.  Will save the current VM state and …\nReturns the argument unchanged.\nReturn the builtin function at idx. Note, will panic if …\nCalls <code>U::from(self)</code>.\nMain function to match and execute anything that is …\nPause garbage collection. Each pause_gc must have an …\nReturn the register for idx.\nReturn the int representation of register idx or error if …\nReturn the current register for idx, if it is stored on …\nReset the VM to default settings.  Useful for cleaning up …\nUnPause garbage collection. Each pause_gc must have an …")